@page "/register"
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage Storage
@inject NavigationManager navigation

<h3>Register</h3>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<EditForm Model="@RegisterModel" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />

    <p>
        <label for="FUserName">UserName</label>
        <InputText id="UserName" @bind-Value="RegisterModel.Username" />
        <ValidationMessage For="() => RegisterModel.Username" />
    </p>
    <p>
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="RegisterModel.FirstName" />
        <ValidationMessage For="() => RegisterModel.FirstName" />
    </p>
    <p>
        <label for="LastName">Last Name</label>
        <InputText id="LastName" @bind-Value="RegisterModel.LastName" />
        <ValidationMessage For="() => RegisterModel.LastName" />
    </p>

    <p>
        <label for="Email">Email</label>
        <InputText id="Email" @bind-Value="RegisterModel.Email" />
        <ValidationMessage For="() => RegisterModel.Email" />
    </p>
    <p>
        <label for="Password">Password</label>
        <InputText id="Password" @bind-Value="RegisterModel.Password" />
        <ValidationMessage For="() => RegisterModel.Password" />
    </p>

    <button type="submit">Kaydet</button>
</EditForm>

@code {
    private bool ShowErrors;
    private string Error = "";
    public ProjectUnluCo.Models.RegisterModel RegisterModel = new();
    private async Task Submit()
    {
        ShowErrors = false;

        var client = ClientFactory.CreateClient();

        var response = await client.PostAsJsonAsync("http://localhost:3000/api/register", RegisterModel);

        if (response.IsSuccessStatusCode)
        {

            navigation.NavigateTo("login");
            await base.OnInitializedAsync();
        }
        else
        {
            Error = response.StatusCode.ToString();
            ShowErrors = true;
        }
    }



}